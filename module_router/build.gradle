apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {

    resourcePrefix "module_router_" //给 Module 内的资源名增加前缀, 避免资源名冲突
    flavorDimensions "verison"

    //这个是ARouter需要配置的kapt
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    defaultConfig {
        compileSdkVersion rootProject.ext.android["compileSdkVersion"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true
        flavorDimensions "versionCode"
        ndk { //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
    }

    signingConfigs {
        File file = new File(rootProject.getRootDir().getAbsolutePath() + "/mvvm.jks")
        debug {
            keyAlias 'key'
            keyPassword '123456'
            storeFile file
            storePassword '123456'
        }
        release {
            keyAlias 'key'
            keyPassword '123456'
            storeFile file
            storePassword '123456'
        }
    }


    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    //支持java8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }


    //生成libs目录
    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }



//支持@Parcelize来实现Parcelable序列化
    androidExtensions {
        experimental = true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies["kotlin"]
    kapt rootProject.ext.dependencies["arouter-compiler"]
    api rootProject.ext.dependencies["arouter"]
    //test
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
}